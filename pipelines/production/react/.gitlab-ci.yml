stages:
  - setup
  - build
  - package
  - deploy

.prod_env: &prod_env
  environment: prod
  variables:
    env_tag: 'prod'
    DOCKER_IMAGE_NAME: 'internal-management-produccion'
    APP_NAME: 'internal-management'
    DOCKER_IMAGE: 'internal-management-produccion-img'
    AWS_IMAGE_NAME: '/internal-management/app-admin:latest'

setup-prod:
  stage: setup
  <<: *prod_env
  image: node:16-alpine
  tags:
    - docker
  script:
    - npm i
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - node_modules
  artifacts:
    expire_in: 1h
    paths:
      - node_modules

build-react-prod:
  stage: build
  <<: *prod_env
  dependencies:
    - setup-prod
  tags:
    - docker
  image: node:12.18.2-buster
  script:
    - npm run build
    - cp -r ./build/ ${APP_NAME}
  artifacts:
    untracked: true
    expire_in: 1h
    paths:
      - ${APP_NAME}
      - ./pipelines/docker/produccion/Dockerfile
      - ./pipelines/docker/produccion/nginx.conf

package-react-prod:
  stage: package
  <<: *prod_env
  tags:
    - shell
  script:
    - >
      docker build
      --build-arg APP=${APP_NAME}
      -f ./pipelines/docker/produccion/Dockerfile
      -t ${DOCKER_IMAGE_NAME} .
    - docker image save ${DOCKER_IMAGE_NAME} -o ${DOCKER_IMAGE}
  needs: ['build-react-prod']
  dependencies:
    - build-react-prod
  artifacts:
    untracked: true
    expire_in: 1h
    paths:
      - ${DOCKER_IMAGE}

deploy-react-prod:
  tags:
    - shell
  stage: deploy
  <<: *prod_env
  needs: ['package-react-prod']
  dependencies:
    - package-react-prod
  script:
    - docker load -i ${DOCKER_IMAGE}
    - >
      docker run
      -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      amazon/aws-cli ecr get-login-password --region us-east-1
      | docker login --username AWS --password-stdin ${AWS_SERVER_NAME}
    - docker tag ${DOCKER_IMAGE_NAME} ${AWS_SERVER_NAME}${AWS_IMAGE_NAME}
    - docker push ${AWS_SERVER_NAME}${AWS_IMAGE_NAME}
